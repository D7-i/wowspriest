import{J as e,K as a,L as t,N as i,m as s,k as r,O as l,l as n,n as o,o as c,Q as d,U as f,V as u,W as p,R as m,T as S,H as h,x as g}from"./preset_utils-CMd3iNAk.chunk.js";import{a6 as T,az as y,S as P,a7 as b,aA as k,a9 as w,ax as F,aq as I,ar as M,aa as A,ab as C,ac as R,ad as E,ae as D,au as x,ag as B,ah as O,a5 as v,ai as H,aj as N,al as j,P as W,am as U,ay as z,aB as L,ak as q,an as G,a0 as J,ao as K,C as _,F as Q,R as V,T as Z}from"./detailed_results-n_WwaEnG.chunk.js";e({fieldName:"latencyMs",label:"Latency",labelTooltip:"Player latency, in milliseconds. Adds a delay to actions that cannot be spell queued."}),a({fieldName:"assumeBleedActive",label:"Assume Bleed Always Active",labelTooltip:"Assume bleed always exists for 'Rend and Tear' calculations. Otherwise will only calculate based on own rip/rake/lacerate.",extraCssClasses:["within-raid-sim-hide"]});const X={inputs:[t({fieldName:"minCombosForRip",label:"Min Rip CP",labelTooltip:"Combo Point threshold for allowing a Rip cast",float:!1,positive:!0}),t({fieldName:"maxWaitTime",label:"Max Wait Time",labelTooltip:"Max seconds to wait for an Energy tick to cast rather than powershifting",float:!0,positive:!0}),t({fieldName:"preroarDuration",label:"Pre-Roar Duration",labelTooltip:"Seconds remaining on a prior Savage Roar buff at the start of the pull",float:!0,positive:!0}),i({fieldName:"maintainFaerieFire",label:"Maintain Faerie Fire",labelTooltip:"If checked, bundle Faerie Fire refreshes with powershifts. Ignored if an external Faerie Fire debuff is selected in settings."}),i({fieldName:"precastTigersFury",label:"Pre-cast Tiger's Fury",labelTooltip:"If checked, model a pre-pull Tiger's Fury cast 3 seconds before initiating combat."}),i({fieldName:"useShredTrick",label:"Use Shred Trick",labelTooltip:'If checked, enable the "Shred trick" micro-optimization. This should only be used on short fight lengths with full powershifting uptime.'})]},Y={type:"TypeAPL",prepullActions:[],priorityList:[{action:{autocastOtherCooldowns:{}}},{action:{castSpell:{spellId:{spellId:9830,rank:5}}}}]},$={items:[{id:16834},{},{id:16836},{},{id:16833},{id:16830},{id:16831},{id:16828},{id:16835},{id:16829},{},{},{},{},{},{},{}]},ee=s("Pre-BiS",{items:[{id:16720},{},{id:16718},{},{id:16706},{id:16714},{id:16717},{id:16716},{id:16719},{id:16715},{},{},{},{},{},{},{}]}),ae=s("P1 BiS",$),te={[T.Phase1]:[ee,ae]},ie=ee,se=r("Feral",Y),re={[T.Phase1]:[se]},le=re[T.Phase1][0],ne=y.create({maintainFaerieFire:!1,minCombosForRip:3,maxWaitTime:2,preroarDuration:26,precastTigersFury:!1,useShredTrick:!1});l("Simple Default",P.SpecFeralDruid,ne);const oe=n("Feral",b.create({talentsString:"500005301-5500020323202151-15"})),ce={[T.Phase1]:[oe]},de=ce[T.Phase1][0],fe=k.create({latencyMs:100,assumeBleedActive:!0}),ue=w.create({agilityElixir:F.ElixirOfTheMongoose,attackPowerBuff:I.JujuMight,defaultConjured:M.ConjuredDemonicRune,defaultPotion:A.MajorManaPotion,dragonBreathChili:!0,flask:C.FlaskOfDistilledWisdom,food:R.FoodSmokedDesertDumpling,mainHandImbue:E.ElementalSharpeningStone,manaRegenElixir:D.MagebloodPotion,miscConsumes:{jujuEmber:!0},strengthBuff:x.JujuPower,zanzaBuff:B.ROIDS}),pe=O.create({arcaneBrilliance:!0,battleShout:v.TristateEffectImproved,divineSpirit:!0,giftOfTheWild:v.TristateEffectImproved,graceOfAirTotem:v.TristateEffectImproved,leaderOfThePack:!0,manaSpringTotem:v.TristateEffectRegular,strengthOfEarthTotem:v.TristateEffectImproved}),me=H.create({blessingOfKings:!0,blessingOfMight:v.TristateEffectImproved,blessingOfWisdom:v.TristateEffectImproved,fengusFerocity:!0,rallyingCryOfTheDragonslayer:!0,saygesFortune:N.SaygesDamage,songflowerSerenade:!0,spiritOfZandalar:!0,warchiefsBlessing:!0}),Se=j.create({curseOfRecklessness:!0,exposeArmor:v.TristateEffectImproved,faerieFire:!0,sunderArmor:!0}),he={profession1:W.Enchanting,profession2:W.Alchemy},ge=o(P.SpecFeralDruid,{cssClass:"feral-druid-sim-ui",cssScheme:"druid",knownIssues:[],warnings:[],epStats:[U.StatMana,U.StatStrength,U.StatAgility,U.StatIntellect,U.StatSpirit,U.StatAttackPower,U.StatFeralAttackPower,U.StatMeleeHit,U.StatMeleeCrit,U.StatMeleeHaste,U.StatExpertise,U.StatMP5],epPseudoStats:[z.BonusPhysicalDamage],epReferenceStat:U.StatAttackPower,displayStats:[U.StatMana,U.StatStrength,U.StatAgility,U.StatIntellect,U.StatSpirit,U.StatAttackPower,U.StatFeralAttackPower,U.StatMeleeHit,U.StatMeleeCrit,U.StatExpertise,U.StatMP5],displayPseudoStats:[z.BonusPhysicalDamage],defaults:{gear:ie.gear,epWeights:c.fromMap({[U.StatStrength]:2.38,[U.StatAgility]:2.35,[U.StatAttackPower]:1,[U.StatFeralAttackPower]:1,[U.StatMeleeHit]:24.46,[U.StatMeleeCrit]:16.67,[U.StatMana]:.04,[U.StatIntellect]:.67,[U.StatSpirit]:.08,[U.StatMP5]:.46,[U.StatFireResistance]:.5},{}),consumes:ue,rotationType:L.TypeSimple,simpleRotation:ne,talents:de.data,specOptions:fe,other:he,raidBuffs:pe,partyBuffs:q.create({}),individualBuffs:me,debuffs:Se},playerIconInputs:[],rotationInputs:X,includeBuffDebuffInputs:[d,f,u,p],excludeBuffDebuffInputs:[E.ElementalSharpeningStone,E.DenseSharpeningStone],otherInputs:{inputs:[m,S,h]},itemSwapConfig:{itemSlots:[G.ItemSlotMainHand,G.ItemSlotOffHand,G.ItemSlotRanged]},encounterPicker:{showExecuteProportion:!1},presets:{talents:[...ce[T.Phase1]],rotations:[...re[T.Phase1]],gear:[...te[T.Phase1]]},autoRotation:e=>le.rotation.rotation,raidSimPresets:[{spec:P.SpecFeralDruid,tooltip:J[P.SpecFeralDruid],defaultName:"Cat",iconUrl:K(_.ClassDruid,3),talents:de.data,specOptions:fe,consumes:ue,defaultFactionRaces:{[Q.Unknown]:V.RaceUnknown,[Q.Alliance]:V.RaceNightElf,[Q.Horde]:V.RaceTauren},defaultGear:{[Q.Unknown]:{},[Q.Alliance]:{1:ie.gear},[Q.Horde]:{1:ie.gear}}}]});class Te extends g{constructor(e,a){super(e,a,ge)}calcArpTarget(e){let a=1399;e.hasTrinket(45931)?a-=751:e.hasTrinket(40256)&&(a-=612);const t=e.getEquippedItem(G.ItemSlotMainHand);return null!=t&&null!=t.enchant&&3225==t.enchant.effectId&&(a-=120),a}calcCritCap(e){let a=0;return e.hasRelic(47668)&&(a+=200),e.hasRelic(50456)&&(a+=220),(e.hasTrinket(47131)||e.hasTrinket(47464))&&(a+=510),(e.hasTrinket(47115)||e.hasTrinket(47303))&&(a+=450),(e.hasTrinket(44253)||e.hasTrinket(42987))&&(a+=300),(new c).withStat(U.StatMeleeCrit,45.91*(77.8-1.1*a*1.06*1.02/83.33))}async updateGear(e){return this.player.setGear(Z.nextEventID(),e),await this.sim.updateCharacterStats(Z.nextEventID()),c.fromProto(this.player.getCurrentStats().finalStats)}}export{Te as F};
