package warrior

import (
	"slices"
	"time"
	"fmt"
	"github.com/wowsims/classic/sim/core"
	"github.com/wowsims/classic/sim/core/stats"
)

///////////////////////////////////////////////////////////////////////////
//                            Phase 1 Item Sets - Molten Core
///////////////////////////////////////////////////////////////////////////

var ItemSetBattleGearOfMight = core.NewItemSet(core.ItemSet{
	Name: "Battlegear of Might",
	Bonuses: map[int32]core.ApplyEffect{
		// Increases the block value of your shield by 30.
		3: func(agent core.Agent) {
			character := agent.GetCharacter()
			character.AddStat(stats.BlockValue, 30)
		},
		// Gives you a 20% chance to generate an additional Rage point whenever damage is dealt to you.
		5: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			actionID := core.ActionID{SpellID: 21838}
			rageMetrics := warrior.NewRageMetrics(actionID)

			core.MakeProcTriggerAura(&warrior.Unit, core.ProcTrigger{
				ActionID:   actionID,
				Name:       "Battlegear of Might - Rage",
				Callback:   core.CallbackOnSpellHitTaken,
				ProcMask:   core.ProcMaskMelee,
				ProcChance: 0.20,
				Handler: func(sim *core.Simulation, spell *core.Spell, _ *core.SpellResult) {
					warrior.AddRage(sim, 1, rageMetrics)
				},
			})
		},
		// Increases the threat generated by Sunder Armor by 15%.
		8: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			warrior.RegisterAura(core.Aura{
				Label: "Reduced Threat",
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					warrior.SunderArmor.ThreatMultiplier *= 1.15
				},
			})
		},
	},
})

///////////////////////////////////////////////////////////////////////////
//                            Phase 2 Item Sets - Dire Maul
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
//                            Phase 3 Item Sets - BWL
///////////////////////////////////////////////////////////////////////////

var ItemSetBattleGearOfWrath = core.NewItemSet(core.ItemSet{
	Name: "Battlegear of Wrath",
	Bonuses: map[int32]core.ApplyEffect{
		// Increases the attack power granted by Battle Shout by 30. 
		3: func(agent core.Agent) {
			// Managed in shouts.go
		},
		// 20% chance after using an offensive ability requiring rage that your next offensive ability requires 5 less rage to use.
		5: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()

			var affectedSpells []*core.Spell

			warriorsWrathAura := warrior.RegisterAura(core.Aura{
				ActionID: core.ActionID{SpellID: 21887},
				Label:    "Warrior's Wrath",
				Duration: time.Second * 10,
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					for _, spell := range warrior.Spellbook {
						if spell.Cost != nil && spell.Cost.CostType() == core.CostTypeRage && !spell.Flags.Matches(core.SpellFlagHelpful) {
							affectedSpells = append(affectedSpells, spell)
						}
					}
				},
				OnGain: func(aura *core.Aura, sim *core.Simulation) {
					for _, spell := range affectedSpells {
						spell.Cost.FlatModifier -= 5
					}
				},
				OnExpire: func(aura *core.Aura, sim *core.Simulation) {
					for _, spell := range affectedSpells {
						spell.Cost.FlatModifier += 5
					}
				},
				OnSpellHitDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if slices.Contains(affectedSpells, spell) {
						aura.Deactivate(sim)
					}
				},
			})

			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "Warrior's Wrath Trigger",
				OnCastComplete: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell) {
					fmt.Println("Is ", spell, "in: ", slices.Contains(affectedSpells, spell))
					if slices.Contains(affectedSpells, spell) {
						fmt.Println("Affected spell",spell)
						if sim.Proc(0.2, "Warrior's Wrath Trigger"){
							fmt.Println("Rolled")
							warriorsWrathAura.Activate(sim)
						}
					}
				},
			}))
		},
		// 4% chance to parry the next attack after a block.
		8: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			actionID := core.ActionID{SpellID: 23548}

			parryAura := warrior.RegisterAura(core.Aura{
				ActionID: actionID,
				Label:    "Parry",
				Duration: time.Second * 10,
				OnGain: func(aura *core.Aura, sim *core.Simulation) {	
					warrior.AddStatDynamic(sim, stats.Parry, 100*core.ParryRatingPerParryChance)
				},
				OnExpire: func(aura *core.Aura, sim *core.Simulation) {
					warrior.AddStatDynamic(sim, stats.Parry, -100*core.ParryRatingPerParryChance)
				},
				OnSpellHitTaken: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					aura.Deactivate(sim)
				},
			})

			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "Parry Trigger Aura",
				OnSpellHitTaken: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if result.DidBlock() && sim.Proc(0.04, "Parry Proc") {
						parryAura.Activate(sim)
					}
				},
			}))

		},
	},
})

var ItemSetVindicatorsBattlegear = core.NewItemSet(core.ItemSet{
	Name: "Vindicator's Battlegear",
	Bonuses: map[int32]core.ApplyEffect{
		// Increases your chance to block attacks with a shield by 2%.
		2: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			warrior.AddStat(stats.Block, 2)
		},
		// Decreases the cooldown of Intimidating Shout by 15 sec.
		3: func(agent core.Agent) {
			// No implementation of Intimidating Shout in sim
		},
		// Decrease the rage cost of Whirlwind by 3.
		5: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			warrior.RegisterAura(core.Aura{
				Label: "Improved Whirlwind",
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					warrior.Whirlwind.Cost.FlatModifier -= 3
				},
			})
		},
	},
})

///////////////////////////////////////////////////////////////////////////
//                            Phase 4 Item Sets - AQ
///////////////////////////////////////////////////////////////////////////

var ItemSetBattlegearOfHeroism = core.NewItemSet(core.ItemSet{
	Name: "Battlegear of Heroism",
	Bonuses: map[int32]core.ApplyEffect{
		// +8 All Resistances.
		2: func(agent core.Agent) {
			c := agent.GetCharacter()
			c.AddResistances(8)
		},
		// Chance on melee attack to heal you for 88 to 133
		4: func(agent core.Agent) {
			c := agent.GetCharacter()
			actionID := core.ActionID{SpellID: 27419}
			healthMetrics := c.NewHealthMetrics(core.ActionID{SpellID: 27419})

			core.MakeProcTriggerAura(&c.Unit, core.ProcTrigger{
				ActionID: actionID,
				Name:     "Warrior's Resolve",
				Callback: core.CallbackOnSpellHitDealt,
				Outcome:  core.OutcomeLanded,
				ProcMask: core.ProcMaskMelee,
				PPM:      1,
				Handler: func(sim *core.Simulation, spell *core.Spell, _ *core.SpellResult) {
					c.GainHealth(sim, sim.Roll(88, 133), healthMetrics)
				},
			})
		},
		// +40 Attack Power.
		6: func(agent core.Agent) {
			c := agent.GetCharacter()
			c.AddStats(stats.Stats{
				stats.AttackPower:       40,
				stats.RangedAttackPower: 40,
			})
		},
		// +200 Armor.
		8: func(agent core.Agent) {
			c := agent.GetCharacter()
			c.AddStat(stats.Armor, 200)
		},
	},
})

var ItemSetConquerorsBattleGear = core.NewItemSet(core.ItemSet{
	Name: "Conqueror's Battlegear",
	Bonuses: map[int32]core.ApplyEffect{
		// Decreases the rage cost of all Warrior shouts by 35%.
		3: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "Conqueror Shout Bonus",
				OnGain: func(aura *core.Aura, sim *core.Simulation) {
					warrior.BattleShout.Cost.Multiplier -= 35
				},
				OnExpire: func(aura *core.Aura, sim *core.Simulation) {
					warrior.BattleShout.Cost.Multiplier += 35
				},
			}))
		},
		// Increase the Slow effect and damage of Thunder Clap by 50%.
		5: func(agent core.Agent) {
			//Implemented in Thunderclap.go
		},
	},
})

///////////////////////////////////////////////////////////////////////////
//                            Phase 5 Item Sets - Naxx
///////////////////////////////////////////////////////////////////////////

var ItemSetDreadnaughtsBattlegear = core.NewItemSet(core.ItemSet{
	Name: "Dreadnaught's Battlegear",
	Bonuses: map[int32]core.ApplyEffect{
		// Increases the damage done by your Revenge ability by 75.
		2: func(agent core.Agent) {
			// Implemented in revenge.go
		},
		// Improves your chance to hit with Taunt and Challenging Shout by 5%.
		4: func(agent core.Agent) {
			// No taunt spells implemented in classic sim
		},
		// Improves your chance to hit with Sunder Armor, Heroic Strike, Revenge, and Shield Slam by 5%.
		6: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "Increased Hit Chance",
				OnGain: func(aura *core.Aura, sim *core.Simulation) {
					warrior.SunderArmor.BonusHitRating += 5
					warrior.HeroicStrike.BonusHitRating += 5
					warrior.Revenge.BonusHitRating += 5
					if warrior.Talents.ShieldSlam {
						warrior.ShieldSlam.BonusHitRating += 5
					}
				},
				OnExpire: func(aura *core.Aura, sim *core.Simulation) {
					warrior.SunderArmor.BonusHitRating -= 5
					warrior.HeroicStrike.BonusHitRating -= 5
					warrior.Revenge.BonusHitRating -= 5
					if warrior.Talents.ShieldSlam {
						warrior.ShieldSlam.BonusHitRating -= 5
					}
				},
			}))	
		},
		// When your health drops below 20%, for the next 5 seconds healing spells cast on you help you to Cheat Death, increasing healing done by up to 160.
		8: func(agent core.Agent) {
			// Current healing model is flat HPS with variance in cadence, doent appear callable to adjust.
		},
	},
})

///////////////////////////////////////////////////////////////////////////
//                            SoD Phase 4 Item Sets
///////////////////////////////////////////////////////////////////////////
/*
var ItemSetUnstoppableMight = core.NewItemSet(core.ItemSet{
	Name: "Unstoppable Might",
	Bonuses: map[int32]core.ApplyEffect{
		// After changing stances, your next offensive ability's rage cost is reduced by 10.
		2: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()

			var affectedSpells []*core.Spell
			tacticianAura := warrior.RegisterAura(core.Aura{
				ActionID: core.ActionID{SpellID: 464241},
				Label:    "Tactician",
				Duration: time.Second * 10,
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					for _, spell := range warrior.Spellbook {
						if spell.Cost != nil && spell.Cost.CostType() == core.CostTypeRage && !spell.Flags.Matches(core.SpellFlagHelpful) {
							affectedSpells = append(affectedSpells, spell)
						}
					}
				},
				OnGain: func(aura *core.Aura, sim *core.Simulation) {
					for _, spell := range affectedSpells {
						spell.Cost.FlatModifier -= 10
					}
				},
				OnExpire: func(aura *core.Aura, sim *core.Simulation) {
					for _, spell := range affectedSpells {
						spell.Cost.FlatModifier += 10
					}
				},
				OnSpellHitDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if slices.Contains(affectedSpells, spell) {
						aura.Deactivate(sim)
					}
				},
			})

			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - T1 - Warrior - Damage 2P Bonus Trigger",
				OnCastComplete: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell) {
					if slices.Contains(StanceCodes, spell.SpellCode) {
						tacticianAura.Activate(sim)
					}
				},
			}))
		},
		// For 15 sec after leaving a stance, you can use abilities requiring that stance as if you were still in that stance.
		4: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()

			duration := time.Second * 15

			battleStanceAura := warrior.RegisterAura(core.Aura{
				ActionID: core.ActionID{SpellID: 457706},
				Label:    "Echoes of Battle Stance",
				Duration: duration,
			})
			defStanceAura := warrior.RegisterAura(core.Aura{
				ActionID: core.ActionID{SpellID: 457699},
				Label:    "Echoes of Defensive Stance",
				Duration: duration,
			})
			berserkStanceAura := warrior.RegisterAura(core.Aura{
				ActionID: core.ActionID{SpellID: 457708},
				Label:    "Echoes of Berserker Stance",
				Duration: duration,
			})
			gladStanceAura := warrior.RegisterAura(core.Aura{
				ActionID: core.ActionID{SpellID: 457819},
				Label:    "Echoes of Gladiator Stance",
				Duration: duration,
			})

			// We're assuming these will be exclusive but TBD
			warrior.newStanceOverrideExclusiveEffect(BattleStance, battleStanceAura)
			warrior.newStanceOverrideExclusiveEffect(DefensiveStance, defStanceAura)
			warrior.newStanceOverrideExclusiveEffect(BerserkerStance, berserkStanceAura)
			warrior.newStanceOverrideExclusiveEffect(AnyStance, gladStanceAura)

			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - T1 - Warrior - Damage 4P Bonus Trigger",
				OnCastComplete: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell) {
					if slices.Contains(StanceCodes, spell.SpellCode) {
						switch warrior.PreviousStance {
						case BattleStance:
							battleStanceAura.Activate(sim)
						case DefensiveStance:
							defStanceAura.Activate(sim)
						case BerserkerStance:
							berserkStanceAura.Activate(sim)
						case GladiatorStance:
							gladStanceAura.Activate(sim)
						}
					}
				},
			}))
		},
		// For the first 10 sec after activating a stance, you can gain an additional benefit:
		// Battle Stance/Gladiator Stance: 10% increased damage done.
		// Berserker Stance: 10% increased critical strike chance.
		// Defensive Stance: 10% reduced Physical damage taken.
		6: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()

			duration := time.Second * 15

			battleAura := warrior.RegisterAura(core.Aura{
				ActionID: core.ActionID{SpellID: 457816},
				Label:    "Battle Forecast",
				Duration: duration,
				OnGain: func(aura *core.Aura, sim *core.Simulation) {
					warrior.PseudoStats.SchoolDamageDealtMultiplier[stats.SchoolIndexPhysical] *= 1.10
				},
				OnExpire: func(aura *core.Aura, sim *core.Simulation) {
					warrior.PseudoStats.SchoolDamageDealtMultiplier[stats.SchoolIndexPhysical] /= 1.10
				},
			})
			defenseAura := warrior.RegisterAura(core.Aura{
				ActionID: core.ActionID{SpellID: 457814},
				Label:    "Defense Forecast",
				Duration: duration,
				OnGain: func(aura *core.Aura, sim *core.Simulation) {
					warrior.PseudoStats.DamageTakenMultiplier *= 0.90
				},
				OnExpire: func(aura *core.Aura, sim *core.Simulation) {
					warrior.PseudoStats.DamageTakenMultiplier /= 0.90
				},
			})
			berserkAura := warrior.RegisterAura(core.Aura{
				ActionID: core.ActionID{SpellID: 457817},
				Label:    "Berserker Forecast",
				Duration: duration,
				OnGain: func(aura *core.Aura, sim *core.Simulation) {
					warrior.AddStatDynamic(sim, stats.MeleeCrit, 10*core.CritRatingPerCritChance)
				},
				OnExpire: func(aura *core.Aura, sim *core.Simulation) {
					warrior.AddStatDynamic(sim, stats.MeleeCrit, -10*core.CritRatingPerCritChance)
				},
			})

			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - T1 - Warrior - Damage 6P Bonus Trigger",
				OnCastComplete: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell) {
					switch spell.SpellCode {
					case SpellCode_WarriorStanceBattle:
						battleAura.Activate(sim)
					case SpellCode_WarriorStanceGladiator:
						battleAura.Activate(sim)
					case SpellCode_WarriorStanceDefensive:
						defenseAura.Activate(sim)
					case SpellCode_WarriorStanceBerserker:
						berserkAura.Activate(sim)
					}
				},
			}))
		},
	},
})


///////////////////////////////////////////////////////////////////////////
//                            SoD Phase 5 Item Sets
///////////////////////////////////////////////////////////////////////////

var ItemSetUnstoppableWrath = core.NewItemSet(core.ItemSet{
	Name: "Unstoppable Wrath",
	Bonuses: map[int32]core.ApplyEffect{
		// Overpower critical strikes refresh the duration of Rend on your target back to its maximum duration.
		2: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - T2 - Warrior - Damage 2P Bonus",
				OnSpellHitDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if spell.SpellCode == SpellCode_WarriorOverpower && result.DidCrit() {
						if dot := warrior.Rend.Dot(result.Target); dot.IsActive() {
							dot.Refresh(sim)
						}
					}
				},
			}))
		},
		// Increases the damage of Heroic Strike, Overpower, and Slam by 25%
		4: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - T2 - Warrior - Damage 4P Bonus",
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					warrior.HeroicStrike.DamageMultiplier *= 1.25
					warrior.Overpower.DamageMultiplier *= 1.25
					if warrior.SlamMH != nil {
						warrior.SlamMH.DamageMultiplier *= 1.25
					}
					if warrior.SlamOH != nil {
						warrior.SlamMH.DamageMultiplier *= 1.25
					}
					if warrior.QuickStrike != nil {
						warrior.QuickStrike.DamageMultiplier *= 1.25
					}
				},
			})
		},
		// Your Slam hits reset the remaining cooldown on your Mortal Strike, Bloodthirst, and Shield Slam abilities.
		6: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			var affectedSpells []*WarriorSpell
			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - T2 - Warrior - Damage 6P Bonus",
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					for _, spell := range []*WarriorSpell{warrior.Bloodthirst, warrior.MortalStrike, warrior.ShieldSlam} {
						if spell != nil {
							affectedSpells = append(affectedSpells, spell)
						}
					}
				},
				OnSpellHitDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if spell.SpellCode == SpellCode_WarriorSlamMH && result.Landed() {
						for _, spell := range affectedSpells {
							spell.CD.Reset()
						}
					}
				},
			}))
		},
	},
})

var ItemSetImmoveableWrath = core.NewItemSet(core.ItemSet{
	Name: "Immoveable Wrath",
	Bonuses: map[int32]core.ApplyEffect{
		// You gain 10 Rage every time you Parry or one of your attacks is Parried.
		2: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()

			actionID := core.ActionID{SpellID: 468066}
			rageMetrics := warrior.NewRageMetrics(actionID)

			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - T2 - Warrior - Protection 2P Bonus",
				OnSpellHitDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if spell.ProcMask.Matches(core.ProcMaskMelee) && result.DidParry() {
						warrior.AddRage(sim, 10, rageMetrics)
					}
				},
				OnSpellHitTaken: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if result.DidParry() {
						warrior.AddRage(sim, 10, rageMetrics)
					}
				},
			}))
		},
		// Revenge also grants you Flurry, increasing your attack speed by 30% for the next 3 swings.
		4: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()

			flurryAura := warrior.makeFlurryAura(5)
			// The consumption trigger may not exist if the Warrior doesn't talent into Flurry
			warrior.makeFlurryConsumptionTrigger(flurryAura)

			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - T2 - Warrior - Protection 4P Bonus",
				OnSpellHitDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if spell.SpellCode == SpellCode_WarriorRevenge {
						flurryAura.Activate(sim)
						flurryAura.SetStacks(sim, 3)
					}
				},
			}))
		},
		// When your target Parries an attack, you instantly Retaliate for 200% weapon damage to that target.
		// Retaliate cannot be Dodged, Blocked, or Parried, but can only occur once every 30 sec per target.
		6: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()

			retaliate := warrior.RegisterSpell(AnyStance, core.SpellConfig{
				ActionID:    core.ActionID{SpellID: 468071},
				SpellSchool: core.SpellSchoolPhysical,
				DefenseType: core.DefenseTypeMelee,
				ProcMask:    core.ProcMaskMeleeMHSpecial, // Retaliate and Retaliation count as normal yellow hits that can proc things
				Flags:       core.SpellFlagMeleeMetrics | core.SpellFlagNoOnCastComplete | core.SpellFlagPassiveSpell,

				CritDamageBonus:  warrior.impale(),
				DamageMultiplier: 1,
				ThreatMultiplier: 1,
				BonusCoefficient: 1,

				ApplyEffects: func(sim *core.Simulation, target *core.Unit, spell *core.Spell) {
					spell.CalcAndDealDamage(sim, target, warrior.MHNormalizedWeaponDamage(sim, spell.MeleeAttackPower()), spell.OutcomeMeleeSpecialNoBlockDodgeParry)
				},
			})

			icds := warrior.NewEnemyICDArray(func(u *core.Unit) *core.Cooldown {
				return &core.Cooldown{
					Timer:    warrior.NewTimer(),
					Duration: time.Second * 30,
				}
			})

			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - T2 - Warrior - Protection 6P Bonus",
				OnSpellHitDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if !spell.ProcMask.Matches(core.ProcMaskMelee) || !result.DidParry() {
						return
					}

					if icd := icds.Get(result.Target); icd.IsReady(sim) {
						retaliate.Cast(sim, result.Target)
						icd.Use(sim)
					}
				},
			}))
		},
	},
})

var ItemSetVindicatorsBattlegear = core.NewItemSet(core.ItemSet{
	Name: "Vindicator's Battlegear",
	Bonuses: map[int32]core.ApplyEffect{
		// Increased Defense +7.
		2: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			warrior.AddStat(stats.Defense, 7)
		},
		// Reduces the cooldown on your Shield Slam ability by 2 sec.
		3: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			if !warrior.Talents.ShieldSlam {
				return
			}

			warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - ZG - Warrior - Gladiator 3P Bonus",
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					warrior.ShieldSlam.CD.Duration -= time.Second * 2
				},
			})
		},
		// Reduces the cooldown on your Bloodrage ability by 30 sec while you are in Gladiator Stance.
		5: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			if !warrior.HasRune(proto.WarriorRune_RuneGladiatorStance) {
				return
			}

			warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - T2 - Warrior - Protection 6P Bonus",
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					idx := slices.IndexFunc(warrior.GladiatorStanceAura.ExclusiveEffects, func(ee *core.ExclusiveEffect) bool {
						return ee.Category.Name == stanceEffectCategory
					})
					ee := warrior.GladiatorStanceAura.ExclusiveEffects[idx]
					oldOnGain := ee.OnGain
					ee.OnGain = func(ee *core.ExclusiveEffect, sim *core.Simulation) {
						oldOnGain(ee, sim)
						warrior.Bloodrage.CD.Duration -= time.Second * 30
					}

					oldOnExpire := ee.OnExpire
					ee.OnExpire = func(ee *core.ExclusiveEffect, sim *core.Simulation) {
						oldOnExpire(ee, sim)
						warrior.Bloodrage.CD.Duration += time.Second * 30
					}
				},
			})
		},
	},
})

///////////////////////////////////////////////////////////////////////////
//                            SoD Phase 6 Item Sets
///////////////////////////////////////////////////////////////////////////

var ItemSetConquerorsAdvance = core.NewItemSet(core.ItemSet{
	Name: "Conqueror's Advance",
	Bonuses: map[int32]core.ApplyEffect{
		// Reduces the cooldown on your Death Wish by 50%.
		2: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			if !warrior.Talents.DeathWish {
				return
			}

			warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - TAQ - Warrior - Damage 2P Bonus",
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					warrior.DeathWish.CD.Duration /= 2
				},
			})
		},
		// You deal 10% increased damage while any nearby enemy is afflicted with both your Rend and your Deep Wounds.
		4: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			if warrior.Talents.DeepWounds == 0 {
				return
			}

			buffAura := warrior.RegisterAura(core.Aura{
				ActionID: core.ActionID{SpellID: 1214166},
				Label:    "Bloodythirsty",
				Duration: time.Second * 3,
				OnGain: func(aura *core.Aura, sim *core.Simulation) {
					warrior.PseudoStats.DamageDealtMultiplier *= 1.10
				},
				OnExpire: func(aura *core.Aura, sim *core.Simulation) {
					warrior.PseudoStats.DamageDealtMultiplier /= 1.10
				},
			})

			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - TAQ - Warrior - Damage 4P Bonus",
				OnSpellHitDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if (spell.SpellCode == SpellCode_WarriorDeepWounds && warrior.Rend.Dot(result.Target).IsActive()) ||
						(spell.SpellCode == SpellCode_WarriorRend && warrior.DeepWounds.Dot(result.Target).IsActive()) {
						buffAura.Activate(sim)
					}
				},
				OnPeriodicDamageDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if (spell.SpellCode == SpellCode_WarriorDeepWounds && warrior.Rend.Dot(result.Target).IsActive()) ||
						(spell.SpellCode == SpellCode_WarriorRend && warrior.DeepWounds.Dot(result.Target).IsActive()) {
						buffAura.Activate(sim)
					}
				},
			}))
		},
	},
})

var ItemSetConquerorsBulwark = core.NewItemSet(core.ItemSet{
	Name: "Conqueror's Bulwark",
	Bonuses: map[int32]core.ApplyEffect{
		// Reduces the cooldown on Thunder Clap by 100%.
		2: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()

			warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - TAQ - Warrior - Tank 2P Bonus",
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					warrior.ThunderClap.CD.Duration = 0
				},
			})
		},
		// Your Shield Slam deals 100% increased threat and its cooldown is reset if it is Dodged, Parried, or Blocked.
		4: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			if !warrior.Talents.ShieldSlam {
				return
			}

			core.MakePermanent(warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - TAQ - Warrior - Tank 4P Bonus",
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					warrior.ShieldSlam.ThreatMultiplier *= 2
				},
				OnSpellHitDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
					if spell.SpellCode == SpellCode_WarriorShieldSlam && result.Outcome.Matches(core.OutcomeDodge|core.OutcomeParry|core.OutcomeBlock) {
						spell.CD.Reset()
					}
				},
			}))
		},
	},
})

var ItemSetBattlegearOfUnyieldingStrength = core.NewItemSet(core.ItemSet{
	Name: "Battlegear of Unyielding Strength",
	Bonuses: map[int32]core.ApplyEffect{
		// Reduces the cooldown on Shockwave by 50%.
		3: func(agent core.Agent) {
			warrior := agent.(WarriorAgent).GetWarrior()
			if !warrior.HasRune(proto.WarriorRune_RuneShockwave) {
				return
			}

			warrior.RegisterAura(core.Aura{
				Label: "S03 - Item - RAQ - Warrior - Tank 3P Bonus",
				OnInit: func(aura *core.Aura, sim *core.Simulation) {
					warrior.Shockwave.CD.Duration /= 2
				},
			})
		},
	},
})
*/